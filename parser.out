Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    ELSE
    IF
    MAIN
    PRINTF
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> includes functions
Rule 2     program -> includes
Rule 3     program -> functions
Rule 4     includes -> includes include
Rule 5     includes -> include
Rule 6     include -> INCLUDE HEADER
Rule 7     functions -> functions function
Rule 8     functions -> function
Rule 9     function -> type ID LPAREN RPAREN LBRACE statements RBRACE
Rule 10    type -> INT
Rule 11    statements -> statements statement
Rule 12    statements -> statement
Rule 13    statement -> declaration
Rule 14    statement -> assignment
Rule 15    statement -> loop
Rule 16    statement -> RETURN expression SEMI
Rule 17    declaration -> type ID EQ expression SEMI
Rule 18    assignment -> ID EQ expression SEMI
Rule 19    loop -> FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE
Rule 20    expression -> expression PLUS expression
Rule 21    expression -> expression MINUS expression
Rule 22    expression -> expression TIMES expression
Rule 23    expression -> expression DIVIDE expression
Rule 24    expression -> NUMBER
Rule 25    expression -> ID

Terminals, with rules where they appear

COMMA                : 
DIVIDE               : 23
ELSE                 : 
EQ                   : 17 18
FOR                  : 19
HEADER               : 6
ID                   : 9 17 18 25
IF                   : 
INCLUDE              : 6
INT                  : 10
LBRACE               : 9 19
LPAREN               : 9 19
MAIN                 : 
MINUS                : 21
NUMBER               : 24
PLUS                 : 20
PRINTF               : 
RBRACE               : 9 19
RETURN               : 16
RPAREN               : 9 19
SEMI                 : 16 17 18 19
TIMES                : 22
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 14 19 19
declaration          : 13
expression           : 16 17 18 19 20 20 21 21 22 22 23 23
function             : 7 8
functions            : 1 3 7
include              : 4 5
includes             : 1 2 4
loop                 : 15
program              : 0
statement            : 11 12
statements           : 9 11 19
type                 : 9 17

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . includes functions
    (2) program -> . includes
    (3) program -> . functions
    (4) includes -> . includes include
    (5) includes -> . include
    (7) functions -> . functions function
    (8) functions -> . function
    (6) include -> . INCLUDE HEADER
    (9) function -> . type ID LPAREN RPAREN LBRACE statements RBRACE
    (10) type -> . INT

    INCLUDE         shift and go to state 6
    INT             shift and go to state 8

    program                        shift and go to state 1
    includes                       shift and go to state 2
    functions                      shift and go to state 3
    include                        shift and go to state 4
    function                       shift and go to state 5
    type                           shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> includes . functions
    (2) program -> includes .
    (4) includes -> includes . include
    (7) functions -> . functions function
    (8) functions -> . function
    (6) include -> . INCLUDE HEADER
    (9) function -> . type ID LPAREN RPAREN LBRACE statements RBRACE
    (10) type -> . INT

    $end            reduce using rule 2 (program -> includes .)
    INCLUDE         shift and go to state 6
    INT             shift and go to state 8

    functions                      shift and go to state 9
    include                        shift and go to state 10
    function                       shift and go to state 5
    type                           shift and go to state 7

state 3

    (3) program -> functions .
    (7) functions -> functions . function
    (9) function -> . type ID LPAREN RPAREN LBRACE statements RBRACE
    (10) type -> . INT

    $end            reduce using rule 3 (program -> functions .)
    INT             shift and go to state 8

    function                       shift and go to state 11
    type                           shift and go to state 7

state 4

    (5) includes -> include .

    INCLUDE         reduce using rule 5 (includes -> include .)
    INT             reduce using rule 5 (includes -> include .)
    $end            reduce using rule 5 (includes -> include .)


state 5

    (8) functions -> function .

    INT             reduce using rule 8 (functions -> function .)
    $end            reduce using rule 8 (functions -> function .)


state 6

    (6) include -> INCLUDE . HEADER

    HEADER          shift and go to state 12


state 7

    (9) function -> type . ID LPAREN RPAREN LBRACE statements RBRACE

    ID              shift and go to state 13


state 8

    (10) type -> INT .

    ID              reduce using rule 10 (type -> INT .)


state 9

    (1) program -> includes functions .
    (7) functions -> functions . function
    (9) function -> . type ID LPAREN RPAREN LBRACE statements RBRACE
    (10) type -> . INT

    $end            reduce using rule 1 (program -> includes functions .)
    INT             shift and go to state 8

    function                       shift and go to state 11
    type                           shift and go to state 7

state 10

    (4) includes -> includes include .

    INCLUDE         reduce using rule 4 (includes -> includes include .)
    INT             reduce using rule 4 (includes -> includes include .)
    $end            reduce using rule 4 (includes -> includes include .)


state 11

    (7) functions -> functions function .

    INT             reduce using rule 7 (functions -> functions function .)
    $end            reduce using rule 7 (functions -> functions function .)


state 12

    (6) include -> INCLUDE HEADER .

    INCLUDE         reduce using rule 6 (include -> INCLUDE HEADER .)
    INT             reduce using rule 6 (include -> INCLUDE HEADER .)
    $end            reduce using rule 6 (include -> INCLUDE HEADER .)


state 13

    (9) function -> type ID . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 14


state 14

    (9) function -> type ID LPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 15


state 15

    (9) function -> type ID LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 16


state 16

    (9) function -> type ID LPAREN RPAREN LBRACE . statements RBRACE
    (11) statements -> . statements statement
    (12) statements -> . statement
    (13) statement -> . declaration
    (14) statement -> . assignment
    (15) statement -> . loop
    (16) statement -> . RETURN expression SEMI
    (17) declaration -> . type ID EQ expression SEMI
    (18) assignment -> . ID EQ expression SEMI
    (19) loop -> . FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE
    (10) type -> . INT

    RETURN          shift and go to state 24
    ID              shift and go to state 18
    FOR             shift and go to state 25
    INT             shift and go to state 8

    type                           shift and go to state 17
    statements                     shift and go to state 19
    statement                      shift and go to state 20
    declaration                    shift and go to state 21
    assignment                     shift and go to state 22
    loop                           shift and go to state 23

state 17

    (17) declaration -> type . ID EQ expression SEMI

    ID              shift and go to state 26


state 18

    (18) assignment -> ID . EQ expression SEMI

    EQ              shift and go to state 27


state 19

    (9) function -> type ID LPAREN RPAREN LBRACE statements . RBRACE
    (11) statements -> statements . statement
    (13) statement -> . declaration
    (14) statement -> . assignment
    (15) statement -> . loop
    (16) statement -> . RETURN expression SEMI
    (17) declaration -> . type ID EQ expression SEMI
    (18) assignment -> . ID EQ expression SEMI
    (19) loop -> . FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE
    (10) type -> . INT

    RBRACE          shift and go to state 28
    RETURN          shift and go to state 24
    ID              shift and go to state 18
    FOR             shift and go to state 25
    INT             shift and go to state 8

    type                           shift and go to state 17
    statement                      shift and go to state 29
    declaration                    shift and go to state 21
    assignment                     shift and go to state 22
    loop                           shift and go to state 23

state 20

    (12) statements -> statement .

    RBRACE          reduce using rule 12 (statements -> statement .)
    RETURN          reduce using rule 12 (statements -> statement .)
    ID              reduce using rule 12 (statements -> statement .)
    FOR             reduce using rule 12 (statements -> statement .)
    INT             reduce using rule 12 (statements -> statement .)


state 21

    (13) statement -> declaration .

    RBRACE          reduce using rule 13 (statement -> declaration .)
    RETURN          reduce using rule 13 (statement -> declaration .)
    ID              reduce using rule 13 (statement -> declaration .)
    FOR             reduce using rule 13 (statement -> declaration .)
    INT             reduce using rule 13 (statement -> declaration .)


state 22

    (14) statement -> assignment .

    RBRACE          reduce using rule 14 (statement -> assignment .)
    RETURN          reduce using rule 14 (statement -> assignment .)
    ID              reduce using rule 14 (statement -> assignment .)
    FOR             reduce using rule 14 (statement -> assignment .)
    INT             reduce using rule 14 (statement -> assignment .)


state 23

    (15) statement -> loop .

    RBRACE          reduce using rule 15 (statement -> loop .)
    RETURN          reduce using rule 15 (statement -> loop .)
    ID              reduce using rule 15 (statement -> loop .)
    FOR             reduce using rule 15 (statement -> loop .)
    INT             reduce using rule 15 (statement -> loop .)


state 24

    (16) statement -> RETURN . expression SEMI
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . NUMBER
    (25) expression -> . ID

    NUMBER          shift and go to state 31
    ID              shift and go to state 32

    expression                     shift and go to state 30

state 25

    (19) loop -> FOR . LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 33


state 26

    (17) declaration -> type ID . EQ expression SEMI

    EQ              shift and go to state 34


state 27

    (18) assignment -> ID EQ . expression SEMI
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . NUMBER
    (25) expression -> . ID

    NUMBER          shift and go to state 31
    ID              shift and go to state 32

    expression                     shift and go to state 35

state 28

    (9) function -> type ID LPAREN RPAREN LBRACE statements RBRACE .

    INT             reduce using rule 9 (function -> type ID LPAREN RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 9 (function -> type ID LPAREN RPAREN LBRACE statements RBRACE .)


state 29

    (11) statements -> statements statement .

    RBRACE          reduce using rule 11 (statements -> statements statement .)
    RETURN          reduce using rule 11 (statements -> statements statement .)
    ID              reduce using rule 11 (statements -> statements statement .)
    FOR             reduce using rule 11 (statements -> statements statement .)
    INT             reduce using rule 11 (statements -> statements statement .)


state 30

    (16) statement -> RETURN expression . SEMI
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40


state 31

    (24) expression -> NUMBER .

    SEMI            reduce using rule 24 (expression -> NUMBER .)
    PLUS            reduce using rule 24 (expression -> NUMBER .)
    MINUS           reduce using rule 24 (expression -> NUMBER .)
    TIMES           reduce using rule 24 (expression -> NUMBER .)
    DIVIDE          reduce using rule 24 (expression -> NUMBER .)


state 32

    (25) expression -> ID .

    SEMI            reduce using rule 25 (expression -> ID .)
    PLUS            reduce using rule 25 (expression -> ID .)
    MINUS           reduce using rule 25 (expression -> ID .)
    TIMES           reduce using rule 25 (expression -> ID .)
    DIVIDE          reduce using rule 25 (expression -> ID .)


state 33

    (19) loop -> FOR LPAREN . assignment expression SEMI assignment RPAREN LBRACE statements RBRACE
    (18) assignment -> . ID EQ expression SEMI

    ID              shift and go to state 18

    assignment                     shift and go to state 41

state 34

    (17) declaration -> type ID EQ . expression SEMI
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . NUMBER
    (25) expression -> . ID

    NUMBER          shift and go to state 31
    ID              shift and go to state 32

    expression                     shift and go to state 42

state 35

    (18) assignment -> ID EQ expression . SEMI
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 43
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40


state 36

    (16) statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 16 (statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 16 (statement -> RETURN expression SEMI .)
    ID              reduce using rule 16 (statement -> RETURN expression SEMI .)
    FOR             reduce using rule 16 (statement -> RETURN expression SEMI .)
    INT             reduce using rule 16 (statement -> RETURN expression SEMI .)


state 37

    (20) expression -> expression PLUS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . NUMBER
    (25) expression -> . ID

    NUMBER          shift and go to state 31
    ID              shift and go to state 32

    expression                     shift and go to state 44

state 38

    (21) expression -> expression MINUS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . NUMBER
    (25) expression -> . ID

    NUMBER          shift and go to state 31
    ID              shift and go to state 32

    expression                     shift and go to state 45

state 39

    (22) expression -> expression TIMES . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . NUMBER
    (25) expression -> . ID

    NUMBER          shift and go to state 31
    ID              shift and go to state 32

    expression                     shift and go to state 46

state 40

    (23) expression -> expression DIVIDE . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . NUMBER
    (25) expression -> . ID

    NUMBER          shift and go to state 31
    ID              shift and go to state 32

    expression                     shift and go to state 47

state 41

    (19) loop -> FOR LPAREN assignment . expression SEMI assignment RPAREN LBRACE statements RBRACE
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . NUMBER
    (25) expression -> . ID

    NUMBER          shift and go to state 31
    ID              shift and go to state 32

    expression                     shift and go to state 48

state 42

    (17) declaration -> type ID EQ expression . SEMI
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 49
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40


state 43

    (18) assignment -> ID EQ expression SEMI .

    RBRACE          reduce using rule 18 (assignment -> ID EQ expression SEMI .)
    RETURN          reduce using rule 18 (assignment -> ID EQ expression SEMI .)
    ID              reduce using rule 18 (assignment -> ID EQ expression SEMI .)
    FOR             reduce using rule 18 (assignment -> ID EQ expression SEMI .)
    INT             reduce using rule 18 (assignment -> ID EQ expression SEMI .)
    NUMBER          reduce using rule 18 (assignment -> ID EQ expression SEMI .)
    RPAREN          reduce using rule 18 (assignment -> ID EQ expression SEMI .)


state 44

    (20) expression -> expression PLUS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMI            reduce using rule 20 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 20 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 20 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40

  ! TIMES           [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]


state 45

    (21) expression -> expression MINUS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMI            reduce using rule 21 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 21 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 21 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40

  ! TIMES           [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]


state 46

    (22) expression -> expression TIMES expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMI            reduce using rule 22 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 22 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 22 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 22 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 22 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]


state 47

    (23) expression -> expression DIVIDE expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMI            reduce using rule 23 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 23 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 23 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 23 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 23 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]


state 48

    (19) loop -> FOR LPAREN assignment expression . SEMI assignment RPAREN LBRACE statements RBRACE
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 50
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40


state 49

    (17) declaration -> type ID EQ expression SEMI .

    RBRACE          reduce using rule 17 (declaration -> type ID EQ expression SEMI .)
    RETURN          reduce using rule 17 (declaration -> type ID EQ expression SEMI .)
    ID              reduce using rule 17 (declaration -> type ID EQ expression SEMI .)
    FOR             reduce using rule 17 (declaration -> type ID EQ expression SEMI .)
    INT             reduce using rule 17 (declaration -> type ID EQ expression SEMI .)


state 50

    (19) loop -> FOR LPAREN assignment expression SEMI . assignment RPAREN LBRACE statements RBRACE
    (18) assignment -> . ID EQ expression SEMI

    ID              shift and go to state 18

    assignment                     shift and go to state 51

state 51

    (19) loop -> FOR LPAREN assignment expression SEMI assignment . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 52


state 52

    (19) loop -> FOR LPAREN assignment expression SEMI assignment RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 53


state 53

    (19) loop -> FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE . statements RBRACE
    (11) statements -> . statements statement
    (12) statements -> . statement
    (13) statement -> . declaration
    (14) statement -> . assignment
    (15) statement -> . loop
    (16) statement -> . RETURN expression SEMI
    (17) declaration -> . type ID EQ expression SEMI
    (18) assignment -> . ID EQ expression SEMI
    (19) loop -> . FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE
    (10) type -> . INT

    RETURN          shift and go to state 24
    ID              shift and go to state 18
    FOR             shift and go to state 25
    INT             shift and go to state 8

    assignment                     shift and go to state 22
    statements                     shift and go to state 54
    statement                      shift and go to state 20
    declaration                    shift and go to state 21
    loop                           shift and go to state 23
    type                           shift and go to state 17

state 54

    (19) loop -> FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements . RBRACE
    (11) statements -> statements . statement
    (13) statement -> . declaration
    (14) statement -> . assignment
    (15) statement -> . loop
    (16) statement -> . RETURN expression SEMI
    (17) declaration -> . type ID EQ expression SEMI
    (18) assignment -> . ID EQ expression SEMI
    (19) loop -> . FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE
    (10) type -> . INT

    RBRACE          shift and go to state 55
    RETURN          shift and go to state 24
    ID              shift and go to state 18
    FOR             shift and go to state 25
    INT             shift and go to state 8

    assignment                     shift and go to state 22
    statement                      shift and go to state 29
    declaration                    shift and go to state 21
    loop                           shift and go to state 23
    type                           shift and go to state 17

state 55

    (19) loop -> FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 19 (loop -> FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 19 (loop -> FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE .)
    ID              reduce using rule 19 (loop -> FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 19 (loop -> FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 19 (loop -> FOR LPAREN assignment expression SEMI assignment RPAREN LBRACE statements RBRACE .)

